{"ast":null,"code":"var _jsxFileName = \"/Users/matsudakaito/Desktop/myportfolio/portfolio2024/src/pages/photo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Masonry from 'react-masonry-css';\nimport '../styles/photo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Photo = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [groupedImages, setGroupedImages] = useState({});\n  const [selectedGenre, setSelectedGenre] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const itemsPerPage = 20;\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get('/api', {\n          params: {\n            offset: (currentPage - 1) * itemsPerPage,\n            limit: itemsPerPage\n          }\n        });\n        setImages(response.data.contents || []);\n        setTotalPages(Math.ceil(response.data.totalCount / itemsPerPage));\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, [currentPage]);\n  useEffect(() => {\n    if (images.length > 0) {\n      const grouped = images.reduce((acc, image) => {\n        image.genre.forEach(genre => {\n          if (!acc[genre]) {\n            acc[genre] = [];\n          }\n          acc[genre].push(image);\n        });\n        return acc;\n      }, {});\n      setGroupedImages(grouped);\n    }\n  }, [images]);\n  const handleGenreClick = genre => {\n    setSelectedGenre(genre);\n  };\n  const handleResetClick = () => {\n    setSelectedGenre(null);\n  };\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n  const handleImageLoad = event => {\n    event.target.classList.add('loaded');\n  };\n  const breakpointColumnsObj = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    500: 2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"photoContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genreButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"PHOTOGRAPH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: [Object.keys(groupedImages).map((genre, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleGenreClick(genre),\n          children: genre\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResetClick,\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      breakpointCols: breakpointColumnsObj,\n      className: \"my-masonry-grid\",\n      columnClassName: \"my-masonry-grid_column\",\n      children: selectedGenre && groupedImages[selectedGenre] ? groupedImages[selectedGenre].map((image, imgIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.photo.url,\n          alt: `Photo ${imgIndex + 1}`,\n          onLoad: handleImageLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)\n      }, imgIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this)) : images.map((image, imgIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.photo.url,\n          alt: `Photo ${imgIndex + 1}`,\n          onLoad: handleImageLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)\n      }, imgIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page),\n        className: page === currentPage ? 'active' : '',\n        children: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Photo, \"MO/q3k//4ZLiden6/AsMJpa4KWU=\");\n_c = Photo;\nexport default Photo;\nvar _c;\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"names":["React","useState","useEffect","axios","Masonry","jsxDEV","_jsxDEV","Photo","_s","images","setImages","groupedImages","setGroupedImages","selectedGenre","setSelectedGenre","currentPage","setCurrentPage","totalPages","setTotalPages","itemsPerPage","fetchImages","response","get","params","offset","limit","data","contents","Math","ceil","totalCount","error","console","length","grouped","reduce","acc","image","genre","forEach","push","handleGenreClick","handleResetClick","handlePageChange","page","handleImageLoad","event","target","classList","add","breakpointColumnsObj","default","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","index","onClick","breakpointCols","columnClassName","imgIndex","src","photo","url","alt","onLoad","Array","from","_","i","_c","$RefreshReg$"],"sources":["/Users/matsudakaito/Desktop/myportfolio/portfolio2024/src/pages/photo.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Masonry from 'react-masonry-css';\nimport '../styles/photo.css';\n\nconst Photo = () => {\n  const [images, setImages] = useState([]);\n  const [groupedImages, setGroupedImages] = useState({});\n  const [selectedGenre, setSelectedGenre] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const itemsPerPage = 20;\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get('/api', {\n          params: {\n            offset: (currentPage - 1) * itemsPerPage,\n            limit: itemsPerPage\n          }\n        });\n        setImages(response.data.contents || []);\n        setTotalPages(Math.ceil(response.data.totalCount / itemsPerPage));\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n\n    fetchImages();\n  }, [currentPage]);\n\n  useEffect(() => {\n    if (images.length > 0) {\n      const grouped = images.reduce((acc, image) => {\n        image.genre.forEach(genre => {\n          if (!acc[genre]) {\n            acc[genre] = [];\n          }\n          acc[genre].push(image);\n        });\n        return acc;\n      }, {});\n      setGroupedImages(grouped);\n    }\n  }, [images]);\n\n  const handleGenreClick = (genre) => {\n    setSelectedGenre(genre);\n  };\n\n  const handleResetClick = () => {\n    setSelectedGenre(null);\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const handleImageLoad = (event) => {\n    event.target.classList.add('loaded');\n  };\n\n  const breakpointColumnsObj = {\n    default: 4,\n    1100: 3,\n    700: 2,\n    500: 2\n  };\n\n  return (\n    <div className=\"photoContainer\">\n      <div className=\"genreButtons\">\n        <p>PHOTOGRAPH</p>\n        <div className=\"right\">\n          {Object.keys(groupedImages).map((genre, index) => (\n            <button key={index} onClick={() => handleGenreClick(genre)}>\n              {genre}\n            </button>\n          ))}\n          <button onClick={handleResetClick}>All</button>\n        </div>\n      </div>\n      <Masonry\n        breakpointCols={breakpointColumnsObj}\n        className=\"my-masonry-grid\"\n        columnClassName=\"my-masonry-grid_column\"\n      >\n        {selectedGenre && groupedImages[selectedGenre] \n          ? groupedImages[selectedGenre].map((image, imgIndex) => (\n              <div key={imgIndex} className=\"gallery-item\">\n                <img\n                  src={image.photo.url}\n                  alt={`Photo ${imgIndex + 1}`}\n                  onLoad={handleImageLoad}\n                />\n              </div>\n            ))\n          : images.map((image, imgIndex) => (\n              <div key={imgIndex} className=\"gallery-item\">\n                <img\n                  src={image.photo.url}\n                  alt={`Photo ${imgIndex + 1}`}\n                  onLoad={handleImageLoad}\n                />\n              </div>\n            ))}\n      </Masonry>\n      <div className=\"pagination\">\n        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n          <button\n            key={page}\n            onClick={() => handlePageChange(page)}\n            className={page === currentPage ? 'active' : ''}\n          >\n            {page}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Photo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}