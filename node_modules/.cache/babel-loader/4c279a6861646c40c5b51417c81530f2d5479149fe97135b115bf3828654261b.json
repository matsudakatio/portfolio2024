{"ast":null,"code":"const imgBackText = `\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles/slideshow.css';\nimport imgBackText from './imgBackText'; // インポート\n\nconst Slideshow = () => {\n  const [images, setImages] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [show, setShow] = useState(true);\n  const [visibleLines, setVisibleLines] = useState([]);\n\n  useEffect(() => {\n    // MicroCMSからデータを取得する関数\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get('https://kaitoportfolio.microcms.io/api/v1/portfolio', {\n          headers: {\n            'X-API-KEY': 'D47K5TpPZfRzZCyXPPs2YxML9X5uOJyWAQdZ'\n          }\n        });\n        setImages(response.data.contents);\n      } catch (error) {\n        console.error('Error fetching data from MicroCMS:', error);\n      }\n    };\n\n    fetchImages();\n\n    const interval = setInterval(() => {\n      setShow(false);\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => (prevIndex + 1) % images.length);\n        setShow(true);\n      }, 500); // アニメーション時間（0.5秒）に合わせる\n    }, 20000); // 20秒ごとに切り替え\n\n    return () => clearInterval(interval);\n  }, [images.length]);\n\n  useEffect(() => {\n    const lines = imgBackText.split('\\n');\n    let currentLine = 0;\n\n    const interval = setInterval(() => {\n      setVisibleLines(prevLines => [...prevLines, lines[currentLine]]);\n      currentLine += 1;\n\n      if (currentLine >= lines.length) {\n        clearInterval(interval);\n      }\n    }, 100); // 行を表示する間隔\n\n    return () => clearInterval(interval);\n  }, []);\n\n  if (images.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"imgContainer\">\n        <div className=\"imgBackText\">\n          {visibleLines.map((line, index) => (\n            <h3 key={index} className=\"line\">\n              {line}\n            </h3>\n          ))}\n        </div>\n\n\n      </div>\n      <div className=\"overviewArea\">\n        <div className=\"left\">\n          <h3 className={title }>\n            {images[currentIndex].title}\n          </h3>\n          <h3 className={hurigana }>\n            {images[currentIndex].hurigana}\n          </h3>\n        </div>\n        <div className=\"right\">\n          <div className={place }>\n            <img src='/img/map.png' alt=\"map\"/>\n            <h3>{images[currentIndex].place}</h3>\n          </div>\n          <h3 className={day }>{images[currentIndex].day}</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Slideshow;\n\n`;\nexport default imgBackText;","map":{"version":3,"names":["imgBackText"],"sources":["/Users/matsudakaito/Desktop/myportfolio/portfolio2024/src/imgBackText.js"],"sourcesContent":["const imgBackText = `\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles/slideshow.css';\nimport imgBackText from './imgBackText'; // インポート\n\nconst Slideshow = () => {\n  const [images, setImages] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [show, setShow] = useState(true);\n  const [visibleLines, setVisibleLines] = useState([]);\n\n  useEffect(() => {\n    // MicroCMSからデータを取得する関数\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get('https://kaitoportfolio.microcms.io/api/v1/portfolio', {\n          headers: {\n            'X-API-KEY': 'D47K5TpPZfRzZCyXPPs2YxML9X5uOJyWAQdZ'\n          }\n        });\n        setImages(response.data.contents);\n      } catch (error) {\n        console.error('Error fetching data from MicroCMS:', error);\n      }\n    };\n\n    fetchImages();\n\n    const interval = setInterval(() => {\n      setShow(false);\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => (prevIndex + 1) % images.length);\n        setShow(true);\n      }, 500); // アニメーション時間（0.5秒）に合わせる\n    }, 20000); // 20秒ごとに切り替え\n\n    return () => clearInterval(interval);\n  }, [images.length]);\n\n  useEffect(() => {\n    const lines = imgBackText.split('\\n');\n    let currentLine = 0;\n\n    const interval = setInterval(() => {\n      setVisibleLines(prevLines => [...prevLines, lines[currentLine]]);\n      currentLine += 1;\n\n      if (currentLine >= lines.length) {\n        clearInterval(interval);\n      }\n    }, 100); // 行を表示する間隔\n\n    return () => clearInterval(interval);\n  }, []);\n\n  if (images.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"imgContainer\">\n        <div className=\"imgBackText\">\n          {visibleLines.map((line, index) => (\n            <h3 key={index} className=\"line\">\n              {line}\n            </h3>\n          ))}\n        </div>\n\n\n      </div>\n      <div className=\"overviewArea\">\n        <div className=\"left\">\n          <h3 className={title }>\n            {images[currentIndex].title}\n          </h3>\n          <h3 className={hurigana }>\n            {images[currentIndex].hurigana}\n          </h3>\n        </div>\n        <div className=\"right\">\n          <div className={place }>\n            <img src='/img/map.png' alt=\"map\"/>\n            <h3>{images[currentIndex].place}</h3>\n          </div>\n          <h3 className={day }>{images[currentIndex].day}</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Slideshow;\n\n`;\n\nexport default imgBackText;\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}